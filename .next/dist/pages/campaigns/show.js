"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _taggedTemplateLiteral2 = require("babel-runtime/helpers/taggedTemplateLiteral");

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require("semantic-ui-react");

var _Layout = require("../../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require("../../ethereum/campaign");

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require("../../ethereum/web3");

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require("../../components/ContributeForm");

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require("../../routes");

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "/home/aniketbiswas/Projects/etherfund/pages/campaigns/show.js?entry";

var _templateObject = (0, _taggedTemplateLiteral3.default)(["\n  .card {\n    transition: all 0.2s cubic-bezier(0.075, 0.82, 0.165, 1);\n    &:hover {\n      transform: scale(1.1);\n    }\n  }\n"], ["\n  .card {\n    transition: all 0.2s cubic-bezier(0.075, 0.82, 0.165, 1);\n    &:hover {\n      transform: scale(1.1);\n    }\n  }\n"]);

var StyledCardWrapper = _styledComponents2.default.div(_templateObject);

var CampaignShow = function (_Component) {
  (0, _inherits3.default)(CampaignShow, _Component);

  function CampaignShow() {
    (0, _classCallCheck3.default)(this, CampaignShow);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignShow, [{
    key: "renderCards",
    value: function renderCards() {
      var _props = this.props,
          balance = _props.balance,
          manager = _props.manager,
          minimumContribution = _props.minimumContribution,
          requestsCount = _props.requestsCount,
          approversCount = _props.approversCount;

      var items = [{
        header: manager,
        meta: "Address of Manager",
        description: "The manager created this campaign and can create requests to withdraw money",
        style: { overflowWrap: "break-word" }
      }, {
        header: minimumContribution,
        meta: "Minimum Contribution (wei)",
        description: "You must contribute at least this much wei to become an approver"
      }, {
        header: requestsCount,
        meta: "Number of Requests",
        description: "A request tries to withdraw money from the contract. Requests must be approved by approvers"
      }, {
        header: approversCount,
        meta: "Number of Approvers",
        description: "Number of people who have already donated to this campaign"
      }, {
        header: _web2.default.utils.fromWei(balance, "ether"),
        meta: "Campaign Balance (ether)",
        description: "The balance is how much money this campaign has left to spend."
      }];

      return _react2.default.createElement(StyledCardWrapper, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }, _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      }));
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }, _react2.default.createElement("h3", { style: { color: "wheat", fontSize: "1.6rem" }, __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }, "Campaign Show"), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 91
        }
      }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }, _react2.default.createElement(_ContributeForm2.default, { address: this.props.address, __source: {
          fileName: _jsxFileName,
          lineNumber: 94
        }
      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 98
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 99
        }
      }, _react2.default.createElement(_routes.Link, { route: "/campaigns/" + this.props.address + "/requests", __source: {
          fileName: _jsxFileName,
          lineNumber: 100
        }
      }, _react2.default.createElement("a", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 101
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 102
        }
      }, "View Requests")))))));
    }
  }], [{
    key: "getInitialProps",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var campaign, summary;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                campaign = (0, _campaign2.default)(props.query.address);
                _context.next = 3;
                return campaign.methods.getSummary().call();

              case 3:
                summary = _context.sent;
                return _context.abrupt("return", {
                  address: props.query.address,
                  minimumContribution: summary[0],
                  balance: summary[1],
                  requestsCount: summary[2],
                  approversCount: summary[3],
                  manager: summary[4]
                });

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiX3RlbXBsYXRlT2JqZWN0IiwiU3R5bGVkQ2FyZFdyYXBwZXIiLCJkaXYiLCJDYW1wYWlnblNob3ciLCJfQ29tcG9uZW50IiwiX19wcm90b19fIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlckNhcmRzIiwiX3Byb3BzIiwicHJvcHMiLCJiYWxhbmNlIiwibWFuYWdlciIsIm1pbmltdW1Db250cmlidXRpb24iLCJyZXF1ZXN0c0NvdW50IiwiYXBwcm92ZXJzQ291bnQiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJkZXNjcmlwdGlvbiIsInN0eWxlIiwib3ZlcmZsb3dXcmFwIiwidXRpbHMiLCJmcm9tV2VpIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiR3JvdXAiLCJyZW5kZXIiLCJjb2xvciIsImZvbnRTaXplIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJhZGRyZXNzIiwicm91dGUiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUtBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBWEEsSUFBSUEsZUFBZSxxRUFBbkI7O0FBRUEsSUFBSUMsa0JBQWtCLHFDQUF1QixDQUFDLHVJQUFELENBQXZCLEVBQWtLLENBQUMsdUlBQUQs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QUF6R0EsR0FqRHdCLENBQTNCLEVBMkpJLENBQUM7QUFDSHJCLFNBQUssaUJBREY7QUFFSEMsV0FBTyxZQUFZO0FBQ2pCLFVBQUkrQixPQUFPLGlDQUFtQixhQUFhLHNCQUFvQkMsSUFBcEIsQ0FBeUIsU0FBU0MsT0FBVCxDQUFpQjlCLEtBQWpCLEVBQXdCO0FBQzFGLFlBQUkrQixRQUFKLEVBQWNDLE9BQWQ7QUFDQSxlQUFPLHNCQUFvQkMsSUFBcEIsQ0FBeUIsU0FBU0MsUUFBVCxDQUFrQkMsUUFBbEIsRUFBNEI7QUFDMUQsaUJBQU8sQ0FBUCxFQUFVO0FBQ1Isb0JBQVFBLFNBQVNDLElBQVQsR0FBZ0JELFNBQVNFLElBQWpDO0FBQ0UsbUJBQUssQ0FBTDtBQUNFTiwyQkFBVyx3QkFBUy9CLE1BQU1zQyxLQUFOLENBQVliLE9BQXJCLENBQVg7QUFDQVUseUJBQVNFLElBQVQsR0FBZ0IsQ0FBaEI7QUFDQSx1QkFBT04sU0FBU1EsT0FBVCxDQUFpQkMsVUFBakIsR0FBOEJDLElBQTlCLEVBQVA7O0FBRUYsbUJBQUssQ0FBTDtBQUNFVCwwQkFBVUcsU0FBU08sSUFBbkI7QUFDQSx1QkFBT1AsU0FBU1EsTUFBVCxDQUFnQixRQUFoQixFQUEwQjtBQUMvQmxCLDJCQUFTekIsTUFBTXNDLEtBQU4sQ0FBWWIsT0FEVTtBQUUvQnRCLHVDQUFxQjZCLFFBQVEsQ0FBUixDQUZVO0FBRy9CL0IsMkJBQVMrQixRQUFRLENBQVIsQ0FIc0I7QUFJL0I1QixpQ0FBZTRCLFFBQVEsQ0FBUixDQUpnQjtBQUsvQjNCLGtDQUFnQjJCLFFBQVEsQ0FBUixDQUxlO0FBTS9COUIsMkJBQVM4QixRQUFRLENBQVI7QUFOc0IsaUJBQTFCLENBQVA7O0FBU0YsbUJBQUssQ0FBTDtBQUNBLG1CQUFLLEtBQUw7QUFDRSx1QkFBT0csU0FBU1MsSUFBVCxFQUFQO0FBbkJKO0FBcUJEO0FBQ0YsU0F4Qk0sRUF3QkpkLE9BeEJJLEVBd0JLLElBeEJMLENBQVA7QUF5QkQsT0EzQjBDLENBQWhDLENBQVg7O0FBNkJBLGVBQVNlLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCO0FBQzNCLGVBQU9sQixLQUFLbEMsS0FBTCxDQUFXLElBQVgsRUFBaUJDLFNBQWpCLENBQVA7QUFDRDs7QUFFRCxhQUFPa0QsZUFBUDtBQUNELEtBbkNNO0FBRkosR0FBRCxDQTNKSjs7QUFtTUEsU0FBT3RELFlBQVA7QUFDRCxDQTdNa0Isa0JBQW5COztrQkErTWVBLFkiLCJmaWxlIjoidW5rbm93biJ9