"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _taggedTemplateLiteral2 = require("babel-runtime/helpers/taggedTemplateLiteral");

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require("semantic-ui-react");

var _factory = require("../ethereum/factory");

var _factory2 = _interopRequireDefault(_factory);

var _Layout = require("../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require("../routes");

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "/home/aniketbiswas/Projects/etherfund/pages/index.js?entry";

var _templateObject = (0, _taggedTemplateLiteral3.default)(["\n  .card {\n    transition: all 0.2s cubic-bezier(0.075, 0.82, 0.165, 1);\n    &:hover {\n      transform: scale(1.1);\n    }\n    & > content {\n      background-color: black;\n    }\n  }\n"], ["\n  .card {\n    transition: all 0.2s cubic-bezier(0.075, 0.82, 0.165, 1);\n    &:hover {\n      transform: scale(1.1);\n    }\n    & > content {\n      background-color: black;\n    }\n  }\n"]);

var StyledCardWrapper = _styledComponents2.default.div(_templateObject);

var CampaignIndex = function (_Component) {
  (0, _inherits3.default)(CampaignIndex, _Component);

  function CampaignIndex() {
    (0, _classCallCheck3.default)(this, CampaignIndex);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignIndex, [{
    key: "renderCampaigns",
    value: function renderCampaigns() {
      var items = this.props.campaigns.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement(_routes.Link, { route: "/campaigns/" + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 32
            }
          }, _react2.default.createElement("a", {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          }, "View Campaign")),
          fluid: true
        };
      });

      return _react2.default.createElement(StyledCardWrapper, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 42
        }
      }));
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }, _react2.default.createElement("div", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, _react2.default.createElement("h3", { style: { color: "wheat", fontSize: "1.6rem" }, __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }, "Open Campaigns"), _react2.default.createElement(_routes.Link, { route: "/campaigns/new", __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, _react2.default.createElement("a", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: "right",
        content: "Create Campaign",
        icon: "add circle",
        primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      }))), this.renderCampaigns()));
    }
  }], [{
    key: "getInitialProps",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var campaigns;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedCampaigns().call();

              case 2:
                campaigns = _context.sent;
                return _context.abrupt("return", { campaigns: campaigns });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiX3RlbXBsYXRlT2JqZWN0IiwiU3R5bGVkQ2FyZFdyYXBwZXIiLCJkaXYiLCJDYW1wYWlnbkluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYW1wYWlnbnMiLCJpdGVtcyIsInByb3BzIiwiY2FtcGFpZ25zIiwibWFwIiwiYWRkcmVzcyIsImhlYWRlciIsImRlc2NyaXB0aW9uIiwiY3JlYXRlRWxlbWVudCIsInJvdXRlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJmbHVpZCIsIkdyb3VwIiwicmVuZGVyIiwic3R5bGUiLCJjb2xvciIsImZvbnRTaXplIiwiZmxvYXRlZCIsImNvbnRlbnQiLCJpY29uIiwicHJpbWFyeSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJtZXRob2RzIiwiZ2V0RGVwbG95ZWRDYW1wYWlnbnMiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFLQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBVEEsSUFBSUEsZUFBZSw0REFBbkI7O0FBRUEsSUFBSUMsa0JBQWtCLHFDQUF1QixDQUFDLGlNQUFELENBQXZCLEVBQTROLENBQUMsaU1BQUQsQ0FBNU4sQ0FBdEI7O0FBU0EsSUFBSUMsb0JBQW9CLDJCQUFPQyxHQUFQLENBQVdGLGVBQVgsQ0FBeEI7O0FBRUEsSUFBSUcsZ0JBQWdCLFVBQVVDLFVBQVYsRUFBc0I7QUFDeEMsMEJBQVVELGFBQVYsRUFBeUJDLFVBQXpCOztB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